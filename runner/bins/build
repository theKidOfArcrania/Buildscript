#!/bin/bash

source /init.sh

uudecode -o input.tar.gz
tar -xf input.tar.gz

chown root:compiler .
chmod 775 .

# Unzip all types of files
runas compiler find . -iname "*.tgz" -exec tar -xf '{}' ';'
runas compiler find . -iname "*.tar.*" -exec tar -xf '{}' ';'
runas compiler find . -iname "*.zip" -exec unzip -qq '{}' ';'

# Remove the __MACOSX file
find . -name '__MACOSX' -exec rm -r '{}' ';' -prune

find_cxx() {
  find -iname '*.cxx' -print0 -o -iname '*.cpp' -print0 -o -iname '*.cc' -print0
}

find_c() {
  find -iname '*.c' -print0
}

find_bison() {
  find -iname '*.y' -print0
}

find_lex() {
  find -iname '*.l' -print0
}

LOG=compile_log

FAILED=1
if [ -f Makefile ]; then
  echo '[*] Compiling with makefile'
  if ! runas compiler make prog; then # Force make to build the "prog" file
    echo '[!] Makefile failed to build!'
    echo '[*] Reverting to manual build...'
  elif [ -f prog ]; then
    FAILED=0
  else
    echo '[!] Makefile did not create the "prog" file!'
    echo '[*] Reverting to manual build...'
  fi
fi

# Manual standard build
if [ $FAILED -ne 0 ] then
  # Process bison files, then lex files, then C/C++ files.
  FAILED=0
  if [ -n "$(find_bison | tr '\0' '\n')" ]; then
    echo '[*] Compiling yacc files'
    find_bison | xargs -n 1 -0 runas compiler bison -d > $LOG 2>&1 || FAILED=1
  fi
  if [ -n "$(find_lex | tr '\0' '\n')" ]; then
    echo '[*] Compiling lex files'
    find_lex | xargs -n 1 -0 runas compiler flex > $LOG 2>&1 || FAILED=1
  fi
  if [ -z "$(find_cxx | tr '\0' '\n')" ]; then
    echo '[*] Compiling with gcc'
    find_c | xargs -0 runas compiler gcc -o prog > $LOG 2>&1 || FAILED=1
  else 
    echo '[*] Compiling with g++'
    (find_cxx && find_c) | xargs -0 runas compiler g++ -o prog > $LOG 2>&1 || FAILED=1
  fi
fi

touch prog

tar -acf x.tar.gz prog $LOG

uuencode x.tar.gz x.tar.gz >&3

if [ $FAILED -ne 0 ]; then
  exit 1
fi
